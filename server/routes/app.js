/**
 * The application server.
 *
 * The entry point for the app is the instance exported by src/main.server.js. It is loaded through the server bundle
 * generated by webpack.server.config.js (vue-ssr-server-bundle.json).
 *
 * Uses the bundle renderer from vue-server-renderer to render the entire content in <!--vue-ssr-outlet-->
 * of template.web.html. It also injects the bundle requests into the head and body. Uses a client manifest
 * (created by webpack.client.config.js) to allow for preloading and prefetching of priority assets.
 *
 * @see https://ssr.vuejs.org/en/bundle-renderer.html
 * @see https://ssr.vuejs.org/en/build-config.html
 * @see src/main.server.js
 */

const fs = require('fs');
const LRU = require('lru-cache');
const glob = require('glob');
const path = require('path');
const {createBundleRenderer} = require('vue-server-renderer');
const config = require('../../config');
const uidCookie = require('../lib/uid-cookie');

const isProd = process.env.NODE_ENV === 'production';
const domain = process.env.DOMAIN || 'localhost';
const resolve = file => path.resolve(__dirname, file);

const renderers = {};

module.exports = app => {
  let enableHMR;

  /**
   * Get render templates
   */
  const templates = {
    web: fs.readFileSync(resolve('../../src/template.web.html'), 'utf8'),
    amp: fs.readFileSync(resolve('../../src/template.amp.html'), 'utf8'),
    turbo: fs.readFileSync(resolve('../../src/template.turbo.html'), 'utf8'),
  };

  /**
   * Get AMP stylesheets
   */
  const stylesheets = {};
  const base = fs.readFileSync(resolve('../../dist/styles-amp.css'), 'utf8');
  glob.sync(`${__dirname}/../../dist/page-*-amp.css`).forEach(file => {
    const id = file.replace(/^.*\//, '').replace(/-amp.css/, '');

    stylesheets[id] = fs.readFileSync(resolve(file), 'utf8');
  });

  stylesheets.get = (id) => {
    let result = base;

    /**
     * @TODO temporal solution with hardcoded route mapping
     */
    if (['page-dress-collection-prom'].includes(id)) {
      id = 'page-dress-collection-hub';
    } else if (['page-dress-collection-wedding'].includes(id)) {
      id = 'page-dress-collection';
    } else if (!id) {
      id = 'page-dress-collection-hub';
    }

    Object.entries(stylesheets).forEach(([key, value]) => {
      if (key.includes(id)) {
        result += '\n' + value;
      }
    });

    return result;
  };

  function createWebRenderer (bundle, options) {
    return createBundleRenderer(bundle, Object.assign(options, {
      template: templates.web,
      inject: false,

      // for component caching
      cache: LRU({
        max: 1000,
        maxAge: 1000 * 60 * 15,
      }),

      // this is only needed when vue-server-renderer is npm-linked
      basedir: resolve('../../dist'),

      // recommended for performance
      runInNewContext: false,
    }));
  }

  function createAmpRenderer (bundle, options) {
    return createBundleRenderer(bundle, Object.assign(options, {
      template: templates.amp,
      inject: false,

      // for component caching
      cache: LRU({
        max: 1000,
        maxAge: 1000 * 60 * 15,
      }),

      // this is only needed when vue-server-renderer is npm-linked
      basedir: resolve('../../dist'),

      // recommended for performance
      runInNewContext: false,
    }));
  }

  function createTurboRenderer (bundle, options) {
    return createBundleRenderer(bundle, Object.assign(options, {
      template: templates.turbo,
      inject: false,

      // for component caching
      cache: LRU({
        max: 1000,
        maxAge: 1000 * 60 * 15,
      }),

      // this is only needed when vue-server-renderer is npm-linked
      basedir: resolve('../../dist'),

      // recommended for performance
      runInNewContext: false,
    }));
  }


  if (isProd) {
    const bundle = require('../../dist/vue-ssr-server-bundle.json');

    const clientManifest = require('../../dist/vue-ssr-client-manifest.json');

    renderers.web = createWebRenderer(bundle, {clientManifest});
    renderers.amp = createAmpRenderer(bundle, {clientManifest});
    renderers.turbo = createTurboRenderer(bundle, {clientManifest});
  } else {
    enableHMR = require('../lib/hmr')(app, (bundle, options) => {
      renderers.web = createWebRenderer(bundle, options);
      renderers.amp = createAmpRenderer(bundle, options);
      renderers.turbo = createTurboRenderer(bundle, options);
    });
  }

  app.get('*', isProd ? render : (req, res) => {
    enableHMR.then(() => render(req, res));
  });

  function render (req, res) {
    res.setHeader('Content-Type', 'text/html');
    uidCookie.set(req, res);

    /**
     * Data available in render and template
     */
    const context = {
      title: config.title,
      url: req.url,
      amp: req.query.amp === 'true',
      turbo: req.query.turbo === 'true',
      canonical: `${domain}${req.url.replace('?amp=true', '')}`,
      cookie: req.headers.cookie,
      stylesheets: stylesheets,
    };

    /**
     * Callback function after Vue render
     */
    function callback (err, html) {
      if (err) {
        if (err.code === 404) {
          res.status(404).end('Page not found');
        } else {
          res.status(500).end('Internal Server Error');
        }

        console.log(req.method, req.url);
        console.error(err.stack || err);
      } else {
        res.status(context.code).end(html);
      }
    }

    /**
     * Render content depending on request type
     */
    if (context.turbo) {
      renderers.turbo.renderToString(context, callback);
    } else if (context.amp) {
      renderers.amp.renderToString(context, callback);
    } else {
      renderers.web.renderToString(context, callback);
    }
  }
};
